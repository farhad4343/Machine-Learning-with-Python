1
00:00:00,000 --> 00:00:03,305
Hello and welcome. In this video,

2
00:00:03,305 --> 00:00:05,220
we'll be covering DB scan.

3
00:00:05,220 --> 00:00:08,070
A density-based clustering algorithm which is

4
00:00:08,070 --> 00:00:11,010
appropriate to use when examining spatial data.

5
00:00:11,010 --> 00:00:12,890
So let's get started.

6
00:00:12,890 --> 00:00:18,200
Most of the traditional clustering techniques such as K-Means, hierarchical,

7
00:00:18,200 --> 00:00:23,610
and Fuzzy clustering can be used to group data in an unsupervised way.

8
00:00:23,610 --> 00:00:26,175
However, when applied to tasks with

9
00:00:26,175 --> 00:00:30,355
arbitrary shaped clusters or clusters within clusters,

10
00:00:30,355 --> 00:00:35,175
traditional techniques might not be able to achieve good results that is,

11
00:00:35,175 --> 00:00:37,980
elements in the same cluster might not share

12
00:00:37,980 --> 00:00:41,785
enough similarity or the performance may be poor.

13
00:00:41,785 --> 00:00:45,720
Additionally, while partitioning based algorithms such as

14
00:00:45,720 --> 00:00:50,250
K-Means may be easy to understand and implement in practice,

15
00:00:50,250 --> 00:00:54,720
the algorithm has no notion of outliers that is,

16
00:00:54,720 --> 00:00:59,455
all points are assigned to a cluster even if they do not belong in any.

17
00:00:59,455 --> 00:01:02,075
In the domain of anomaly detection,

18
00:01:02,075 --> 00:01:05,340
this causes problems as anomalous points will be

19
00:01:05,340 --> 00:01:09,105
assigned to the same cluster as normal data points.

20
00:01:09,105 --> 00:01:13,110
The anomalous points pull the cluster centroid towards

21
00:01:13,110 --> 00:01:17,350
them making it harder to classify them as anomalous points.

22
00:01:17,350 --> 00:01:21,840
In contrast, density-based clustering locates regions of

23
00:01:21,840 --> 00:01:26,760
high density that are separated from one another by regions of low density.

24
00:01:26,760 --> 00:01:32,480
Density in this context is defined as the number of points within a specified radius.

25
00:01:32,480 --> 00:01:38,885
A specific and very popular type of density-based clustering is DBSCAN.

26
00:01:38,885 --> 00:01:42,480
DBSCAN is particularly effective for tasks

27
00:01:42,480 --> 00:01:46,130
like class identification on a spatial context.

28
00:01:46,130 --> 00:01:50,790
The wonderful attributes of the DBSCAN algorithm is that it can

29
00:01:50,790 --> 00:01:55,785
find out any arbitrary shaped cluster without getting effected by noise.

30
00:01:55,785 --> 00:02:00,960
For example, this map shows the location of weather stations in Canada.

31
00:02:00,960 --> 00:02:03,870
DBSCAN can be used here to find

32
00:02:03,870 --> 00:02:07,485
the group of stations which show the same weather condition.

33
00:02:07,485 --> 00:02:13,410
As you can see, it not only finds different arbitrary shaped clusters it can find

34
00:02:13,410 --> 00:02:19,919
the denser part of data-centered samples by ignoring less dense areas or noises.

35
00:02:19,919 --> 00:02:24,840
Now, let's look at this clustering algorithm to see how it works.

36
00:02:24,840 --> 00:02:31,850
DBSCAN stands for Density-Based Spatial Clustering of Applications with Noise.

37
00:02:31,850 --> 00:02:33,840
This technique is one of

38
00:02:33,840 --> 00:02:39,175
the most common clustering algorithms which works based on density of object.

39
00:02:39,175 --> 00:02:43,870
DBSCAN works on the idea that if a particular point belongs to

40
00:02:43,870 --> 00:02:48,685
a cluster it should be near to lots of other points in that cluster.

41
00:02:48,685 --> 00:02:51,424
It works based on two parameters;

42
00:02:51,424 --> 00:02:54,310
radius and minimum points.

43
00:02:54,310 --> 00:03:00,160
R determines a specified radius that if it includes enough points within it,

44
00:03:00,160 --> 00:03:02,455
we call it a dense area.

45
00:03:02,455 --> 00:03:05,650
M determines the minimum number of data points we

46
00:03:05,650 --> 00:03:09,050
want in a neighborhood to define a cluster.

47
00:03:09,050 --> 00:03:12,330
Let's define radius as two units.

48
00:03:12,330 --> 00:03:14,280
For the sake of simplicity,

49
00:03:14,280 --> 00:03:18,955
assume it has radius of two centimeters around a point of interest.

50
00:03:18,955 --> 00:03:26,025
Also, let's set the minimum point or M to be six points including the point of interest.

51
00:03:26,025 --> 00:03:28,595
To see how DBSCAN works,

52
00:03:28,595 --> 00:03:31,360
we have to determine the type of points.

53
00:03:31,360 --> 00:03:35,320
Each point in our dataset can be either a core,

54
00:03:35,320 --> 00:03:37,875
border, or outlier point.

55
00:03:37,875 --> 00:03:41,710
Don't worry, I'll explain what these points are in a moment.

56
00:03:41,710 --> 00:03:45,305
But the whole idea behind the DBSCAN algorithm

57
00:03:45,305 --> 00:03:49,095
is to visit each point and find its type first,

58
00:03:49,095 --> 00:03:53,430
then we group points as clusters based on their types.

59
00:03:53,430 --> 00:03:55,820
Let's pick a point randomly.

60
00:03:55,820 --> 00:03:59,830
First, we check to see whether it's a core data point.

61
00:03:59,830 --> 00:04:03,075
So, what is a core point?

62
00:04:03,075 --> 00:04:06,680
A data point is a core point if within

63
00:04:06,680 --> 00:04:11,295
our neighborhood of the point there are at least M points.

64
00:04:11,295 --> 00:04:16,950
For example, as there are six points in the two centimeter neighbor of the red point,

65
00:04:16,950 --> 00:04:19,970
we mark this point as a core point.

66
00:04:19,970 --> 00:04:24,240
Okay, what happens if it's not a core point?

67
00:04:24,240 --> 00:04:26,895
Let's look at another point.

68
00:04:26,895 --> 00:04:29,575
Is this point a core point?

69
00:04:29,575 --> 00:04:32,340
No. As you can see,

70
00:04:32,340 --> 00:04:36,755
there are only five points in this neighborhood including the yellow point,

71
00:04:36,755 --> 00:04:39,670
so what kind of point is this one?

72
00:04:39,670 --> 00:04:42,515
In fact, it is a border point.

73
00:04:42,515 --> 00:04:44,615
What is a border point?

74
00:04:44,615 --> 00:04:48,700
A data point is a border point if A;

75
00:04:48,700 --> 00:04:53,120
its neighbourhood contains less than M data points or B;

76
00:04:53,120 --> 00:04:56,260
it is reachable from some core point.

77
00:04:56,260 --> 00:05:01,920
Here, reachability means it is within our distance from a core point.

78
00:05:01,920 --> 00:05:04,780
It means that even though the yellow point is

79
00:05:04,780 --> 00:05:07,920
within the two centimeter neighborhood of the red point,

80
00:05:07,920 --> 00:05:11,260
it is not by itself a core point because it

81
00:05:11,260 --> 00:05:15,105
does not have at least six points in its neighborhood.

82
00:05:15,105 --> 00:05:17,750
We continue with the next point.

83
00:05:17,750 --> 00:05:21,445
As you can see, it is also a core point

84
00:05:21,445 --> 00:05:26,530
and all points around it which are not core points are border points.

85
00:05:26,530 --> 00:05:30,895
Next core point and next core point.

86
00:05:30,895 --> 00:05:33,140
Let's pick this point.

87
00:05:33,140 --> 00:05:37,855
You can see it is not a core point nor is it a border point.

88
00:05:37,855 --> 00:05:40,914
So, we'd label it as an outlier.

89
00:05:40,914 --> 00:05:42,905
What is an outlier?

90
00:05:42,905 --> 00:05:46,850
An outlier is a point that is not a core point and

91
00:05:46,850 --> 00:05:51,020
also is not close enough to be reachable from a core point.

92
00:05:51,020 --> 00:05:55,210
We continue and visit all the points in the dataset

93
00:05:55,210 --> 00:05:59,910
and label them as either core, border, or outlier.

94
00:05:59,910 --> 00:06:03,060
The next step is to connect core points that are

95
00:06:03,060 --> 00:06:06,100
neighbors and put them in the same cluster.

96
00:06:06,100 --> 00:06:09,120
So, a cluster is formed as

97
00:06:09,120 --> 00:06:15,660
at least one core point plus all reachable core points plus all their borders.

98
00:06:15,660 --> 00:06:20,865
It's simply shapes all the clusters and finds outliers as well.

99
00:06:20,865 --> 00:06:26,025
Let's review this one more time to see why DBSCAN is cool.

100
00:06:26,025 --> 00:06:29,840
DBSCAN can find arbitrarily shaped clusters.

101
00:06:29,840 --> 00:06:34,755
It can even find a cluster completely surrounded by a different cluster.

102
00:06:34,755 --> 00:06:40,040
DBSCAN has a notion of noise and is robust to outliers.

103
00:06:40,040 --> 00:06:41,630
On top of that,

104
00:06:41,630 --> 00:06:47,020
DBSCAN makes it very practical for use in many real-world problems because it does

105
00:06:47,020 --> 00:06:53,035
not require one to specify the number of clusters such as K in K-means.

106
00:06:53,035 --> 00:06:57,200
This concludes this video. Thanks for watching.